|mundo numero paridad index suma productos coleccion|.'Unstring' first:3."subString hasta la posicion 3"'Unstring' allButFirst: 3."substring desde 3 hasta el final"'Unstring' copyFrom: 2 to:5. "substring entre la pocion 2 y 5"5 between: 6 and:10. "esta entre 6 y 10"1 to:5.Array with:1  with:'pepe' with: nil with:'String'." array con los elemntos idicado en witch""Ejemplo if"numero:=11.(numero \\2)=0	ifTrue:[paridad:=0]	ifFalse:[paridad :=1].Transcript show:'el numero ',numero asString,' tiene paridad a ', paridad asString;cr."ejemplo while"[ index>0]whileTrue: [Transcript show:index;cr.		index:=index-1	]."Ejemplo for"1 to:10 do:[:index| Transcript show: index;cr  ].1 to:10  by:2  do: [ :index |Transcript show:index;cr ].25 timesRepeat:[ Transcript show: '*' ].Transcript cr."do se utiliza con argumento"suma :=0.#(2 3 5 7 11 13) do: [:primo"argumento"|suma:=suma+primo  ].Transcript show: suma ;cr."collect tambien necesita argumeto"productos :=#(2 3 5 7 11 13)collect:[:primo |primo + primo]."multiplica cada elemenot del arrgeglo por si mismo y agisna dicho valor al arreglo"Transcript show: productos ;cr."colecciones SortedCollection sele puede especificar un bloque con argumento como comparador"coleccion :=SortedCollection sortBlock: [:x :y | x size < y size ]."crea una collecion de elementos con un orden que se especifica"coleccion add:'un string mas largo' .coleccion add:'un String' .coleccion add:#(#un #arry #con @simbolos).Transcript show: coleccion ;cr.